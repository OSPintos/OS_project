		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Alfred Samy <alfred_samy2010@yahoo.com>
Robert Nabil <robert_nabil20022002@yahoo.com>
Mahmoud Salah <mahmoudsalah1993@hotmail.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

-There is no new or changed `struct' to implement argument pssing

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

-first we parse the argument using strtoK_r() and we push 
the result in the stack and increace argc and save its address
-then push word-align = 0 then push the address of all the arguments
-push argv and argc, then push a fake return value, all while decrementing $esp 
accordingly. The elements of argv[] are pushed onto the stack in reverse order, 
which is what is expected. I avoid overflowing by checking to make sure the 
argument string isn't too long.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
The kernel needs to be reentrant. Therefore, it implements strtok_r(), which is
a reentrant version of strtok().

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

One advantage is that the kernel code becomes a lot simpler. Since the shell is
a system application, the separation of the name and arguments is done outside
the kernel and therefore reduces the number of potential bugs in the kernel.

Another advantage of the Unix approach is that the shell abstracts away the
stack setup onto the kernel in a consistent manner, rather than the kernel
having to do it all by itself.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread {
int exit_error : used to print the exit status of the thread.
struct list child_proc: list of child of the current thread used in process_wait
struct thread* parent: the parent thread of the current used in process_wait
struct file *self: the exacutable file of the user program
struct semaphore child_lock: semaphore to wait until the child finish
int waitingon: the tid of the child the thread is waiting for it to finish
}
struct child {	used in the child list of each thread
	int tid;
	struct list_elem elem;
	int exit_error;
	bool used;
}

static struct lock file_lock; The lock used to synchronize file access events.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

 - A file gets a file descriptor that is its index in open files list
plus 2 as 0 and 1 are not allowed. A file descriptor is unique to each
process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

-first we get the child thread by searching in thread_current()->child_proc
using tid then change waitingon = ch->tid, the add the thread to the 
semaphore:thread_current()->child_lock, and wait until the child finish
and signal to it using sema_up.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

- we check if the executable leads to a verified pointer and if not returns -1
so that the calling thread receives the status of the load operation.
If the pointer is correct the executable is executed.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

- When a process is terminated all  open files are closed one by one and 
the resources they had are freed. If parent process is waiting the using semaphore
synchronization to notify child process is closed.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
